## Аннотация

В данной курсовой работе рассматривается разработка и анализ распределенной базы данных, состоящей из двух шардов и общего провайдера идентификаторов. Система предназначена для эффективного хранения и обработки больших объемов данных, что особенно актуально в условиях современного информационного общества. Провайдер идентификаторов предоставляет уникальные идентификаторы пачками по 100000 штук за одно обращение, что значительно снижает нагрузку на систему и ускоряет процесс работы с данными.

Использование шардирования позволяет распределить данные по нескольким узлам, что обеспечивает высокую доступность и отказоустойчивость системы. Основной акцент делается на параллельной обработке SQL-запросов с использованием библиотеки MPI.NET на языке C#. Это позволяет эффективно использовать ресурсы многоядерных процессоров и значительно ускоряет выполнение операций с базой данных.

Работа включает в себя проектирование архитектуры системы, реализацию ключевых компонентов, а также тестирование производительности. Результаты показали, что применение параллельной обработки запросов может привести к значительному увеличению скорости выполнения операций, что делает систему подходящей для решения задач в условиях больших объемов данных.

В ходе исследования также рассматриваются сложности и ограничения, связанные с параллельной обработкой, такие как необходимость управления состоянием данных и синхронизации между потоками. Обсуждаются возможные направления для дальнейшего улучшения системы, включая оптимизацию алгоритмов обработки данных и расширение функциональности базы данных.

Таким образом, проведенное исследование имеет практическую ценность для разработки эффективных методов управления данными в распределенных системах и может быть полезно как для академического сообщества, так и для практикующих специалистов в области информационных технологий.

## Введение

С развитием информационных технологий и увеличением объемов данных, которые необходимо обрабатывать, возрастает потребность в эффективных методах управления и хранения этих данных. Одним из подходов к решению этой задачи является шардирование баз данных, которое позволяет распределять данные по нескольким узлам или серверам. Это особенно актуально для крупных приложений, работающих с большими объемами информации, где традиционные методы хранения могут не справляться с нагрузкой.

Ручное шардирование представляет собой процесс, при котором разработчик самостоятельно определяет, как данные будут распределены между различными шардированными узлами. Это может включать в себя выбор ключей шардирования и определение логики распределения данных. Преимущества ручного шардирования заключаются в том, что оно предоставляет разработчикам полный контроль над тем, как данные организованы и хранятся. Это позволяет оптимизировать производительность системы под конкретные сценарии использования, а также уменьшить задержки при доступе к данным.

Однако у ручного шардирования есть и недостатки. Во-первых, оно требует значительных усилий для настройки и поддержки. Разработчикам необходимо тщательно продумывать архитектуру системы, чтобы избежать проблем с балансировкой нагрузки и обеспечить высокую доступность данных. Во-вторых, ручное шардирование может усложнить выполнение определенных операций с данными, таких как объединение таблиц или использование внешних ключей (foreign keys). В связи с тем, что данные распределены по различным узлам, поддержание целостности данных становится более сложной задачей. Это приводит к необходимости реализовывать дополнительные механизмы для обеспечения согласованности данных.

Использование дополнительной базы данных в качестве источника идентификаторов (ID) является важным аспектом проектирования распределенных систем. В контексте разработки распределенной базы данных, которая состоит из нескольких шардов, организация эффективного механизма генерации и распределения уникальных идентификаторов становится критически важной для обеспечения целостности и согласованности данных.
    Преимущества использования дополнительной базы данных для ID
1. Централизованное управление идентификаторами: Дополнительная база данных может служить единым источником идентификаторов, что упрощает управление и предотвращает дублирование. Это особенно важно в распределенных системах, где разные узлы могут пытаться генерировать идентификаторы независимо друг от друга.
Увеличение производительности: Генерация идентификаторов пакетами (например, по 100000 штук) позволяет значительно сократить количество обращений к базе данных. Это снижает нагрузку на систему и ускоряет процесс получения идентификаторов, что особенно актуально при высоких нагрузках.
2. Гибкость и масштабируемость: Использование отдельной базы данных для ID позволяет легко масштабировать систему. При необходимости можно добавить новые шардированные узлы или изменить логику генерации идентификаторов без изменения основной структуры базы данных.
3. Упрощение логики приложения: Централизованный провайдер идентификаторов может скрыть сложность генерации уникальных значений от остальной части приложения, позволяя разработчикам сосредоточиться на бизнес-логике.
    Недостатки использования дополнительной базы данных для ID
1. Точка отказа: Если база данных, отвечающая за генерацию идентификаторов, выходит из строя, это может привести к остановке всей системы. Поэтому необходимо обеспечить резервирование и отказоустойчивость данного компонента.
2. Проблемы с производительностью при высокой нагрузке: При очень больших объемах запросов на получение идентификаторов может возникнуть узкое место в производительности, если база данных не будет оптимизирована должным образом.
3. Сложность реализации: Необходимость в дополнительной базе данных требует дополнительных усилий на проектирование и реализацию системы, что может увеличить время разработки.

В данной работе используется **PostgreSQL** как основная система управления базами данных (СУБД). PostgreSQL — это мощная объектно-реляционная СУБД с открытым исходным кодом, известная своей надежностью и расширяемостью. Она поддерживает множество современных функций, таких как транзакции, сложные запросы и расширенные типы данных. Однако одной из особенностей PostgreSQL является то, что при ручном шардировании возникает необходимость отказаться от использования внешних ключей. Это связано с тем, что внешние ключи требуют наличия единой схемы для обеспечения ссылочной целостности данных, что невозможно при распределении данных по нескольким узлам.

Для решения задач параллельной обработки запросов в рамках данной работы используется библиотека **MPI.NET** (Message Passing Interface for .NET). MPI является стандартом для параллельного программирования и широко используется в высокопроизводительных вычислениях. MPI.NET предоставляет возможность разработчикам .NET использовать интерфейс MPI для создания параллельных приложений. Это позволяет эффективно распределять задачи между несколькими процессами и узлами сети, что значительно увеличивает производительность обработки данных.

MPI.NET поддерживает различные модели передачи сообщений и синхронизации между процессами, что делает его идеальным инструментом для реализации параллельных SQL-запросов к распределенной базе данных. Используя MPI.NET, разработчики могут создавать приложения, которые способны обрабатывать большие объемы данных одновременно на нескольких узлах системы.

Таким образом, данная работа направлена на исследование возможностей ручного шардирования баз данных с использованием PostgreSQL и параллельной обработки запросов через MPI.NET. Мы рассмотрим как преимущества, так и недостатки данного подхода, а также предложим решения для повышения производительности и надежности системы в условиях больших объемов данных.
